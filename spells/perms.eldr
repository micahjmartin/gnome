# Test the permissions function, any output is bad
usernfo = sys.get_user()

if usernfo["euid"]["uid"] == 0:
    print("Cannot test permissions when user is root")

PERM_READ = 4
PERM_WRITE = 2
PERM_EXEC = 1

def list_permissions(*path, _root="/", _tree={}):
    """Return the permisions and effective permissions of files or directories. If the user
    does not have permission to list the file or parent directory, it will be omitted. Use this
    function to check if you can r/w/x a file before calling other functions on it

    Because the entire file tree may be traversed, it is most efficient to call this with all the paths
    that will be accessed at once rather than many times over.

    This function recurses on itself, only call with the paths param and do not use _root, or _tree
    """
    if path:
        for p in path:
            t = _tree
            for i in p.strip("/").split("/"):
                if i not in t:
                    t[i] = {}
                t = t[i]
    res = {}
    for f in file.list(_root):
        if f["file_name"] not in _tree:
            continue
        f["effective_perms"] = effective_perms(f)
        if _tree[f["file_name"]] == {}:
            # This is the end of the line, add the results
            res[_root + f["file_name"]] = f
        elif f['type'] == "Directory":
            if "r" not in f["effective_perms"]:
                continue # We cant read this so it doesnt get returned and neither does any files in it
            res.update(list_permissions("", _root=_root + f["file_name"] + "/", _tree=_tree[f["file_name"]]))
    return res

def effective_perms(f):
    """Return if the user has permisions to r/w/x this file or directory
    return:
        r - Can the user read the file
        w - Can the user write the file
        x - Can the user execute the file
        exec - Is the file executable by anyone
        immutable - NOT IMPLEMENTED: TODO: No way to get this info
    """
    res = {"r": False, "w": False, "x": False, "exec": False, "immutable": False}
    f_user = int(f["permissions"][-3]) # User byte
    f_group = int(f["permissions"][-2]) # Group byte
    f_world = int(f["permissions"][-1]) # World byte applies to everyone

    # If ANYONE can execute it, this file is marked as executable
    if any((f_world & PERM_EXEC, f_group & PERM_EXEC, f_user & PERM_EXEC)):
        res["exec"] = True
    
    # Are we root?
    root = usernfo["euid"]["uid"] == 0
    
    # If the user isnt root and the user doesnt own the file, clear the user byte   
    if not root and f["owner"] not in (usernfo["euid"]["name"], usernfo["uid"]["name"]):
        f_user = 0
    
    # TODO: https://github.com/spellshift/realm/issues/570
    # Will NOT match any group other than primary until #570 is fixed

    # If the user isnt root and the group doesnt own the file, clear the group byte    
    if not root and f["group"] not in (str(usernfo["egid"]), str(usernfo["gid"])):
        f_group = 0

    # Add the perms if they match
    if any((f_world & PERM_EXEC, f_group & PERM_EXEC, f_user & PERM_EXEC)):
        res["x"] = True
    if any((f_world & PERM_WRITE, f_group & PERM_WRITE, f_user & PERM_WRITE)):
        res["w"] = True
    if any((f_world & PERM_READ, f_group & PERM_READ, f_user & PERM_READ)):
        res["r"] = True
    
    # TODO: https://github.com/spellshift/realm/issues/572
    # strip write perm if file is immutable
    return res

fail = False
def test(_f, r=False, w=False, x=False):
    perms = effective_perms(_f)
    if perms["r"] != r:
        print("[!] Read does not match: expected =", r, "actual =", perms["r"],f,"\n")
    if perms["w"] != w:
        print("[!] Write does not match: expected =", w, "actual =", perms["w"],f,"\n")
    if perms["x"] != x:
        print("[!] Exec does not match: expected =", x, "actual =", perms["x"],f,"\n")



# Nothing
f = {"owner": usernfo["euid"]["name"], "group": "1000", "permissions": "000"}
test(f)
# Switch the owner
f = {"owner": "banana", "group": "9000", "permissions": "700"}
test(f)
# Switch the owner
f = {"owner": "banana", "group": "9000", "permissions": "070"}
test(f)
# Test user perms
# Read
f = {"owner": usernfo["euid"]["name"], "group": "1000", "permissions": "400"}
test(f, r=True)
f = {"owner": usernfo["euid"]["name"], "group": "1000", "permissions": "600"}
test(f, r=True, w=True)
f = {"owner": usernfo["euid"]["name"], "group": "1000", "permissions": "700"}
test(f, r=True, w=True, x=True)

# Testing the group
f = {"owner": "banana", "group": str(usernfo["gid"]), "permissions": "710"}
test(f,x=True)
f = {"owner": "banana", "group": str(usernfo["gid"]), "permissions": "050"}
test(f,r=True, x=True)
f = {"owner": "banana", "group": str(usernfo["gid"]), "permissions": "730"}
test(f,w=True, x=True)
f = {"owner": "banana", "group": str(usernfo["gid"]), "permissions": "020"}
test(f, w=True)
f = {"owner": "banana", "group": "9999", "permissions": "007"}
test(f, w=True, r=True, x=True)